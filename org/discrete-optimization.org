#+HTML_MATHJAX: align:"center" mathml:t path:"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" indent: 0em 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/style.css">
#+BEGIN_HTML
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "AMS"} } });
</script>
#+END_HTML
#+OPTIONS: author:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: num:t
#+STARTUP: content
-----
#+TITLE:Discrete Optimization
#+OPTIONS: toc:nil
* 最小花费流
问题介绍
输入：给出一个有向图 $G=(V,E)$ ，有边的容量函数： $w:E\to{\Re^+}$ ，边的花费函数 $c:E\to{\Re^+}$ 和一个平衡函数 $b:V\to{\Re}$ 。\\
目标：计算一个可行解 $f$ ，以使总花费 $\sum_{e\in{E}}c(e)f(e)$ 最小。\\
这个问题可以表示为一个线性优化方程：
\begin{equation}
\begin{split}
minimize \space \sum_{e\in{E}}c(e)f(e)\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\\
subject \space{to}  \sum_{(u,v)\in{E}}f(u,v)-\sum_{(v,u)\in{E}}f(v,u) &= &b(u)\space & \forall{u}\in{V}\\
f(e) & \le &w(e) & \forall{e}\in{E}\\
f(e) & \ge &0    & \forall{e}\in{E}\\
\end{split}
\end{equation}

比如货物转运问题，从一个点要向另一个点运送一定数量的物品，中间要经过某些节点。所有这些节点构成一个有向图。更一般的描述是每个节点都要求输入进来或输出去一定数量的物品。每一个节点上有一个数值，如果为正，代表此节点要输出这个数量的物品，为负代表要输入这么多物品。因此应该要求所有的这些值加起来为0。边上有两个数值，分别是容量：即这条路上可以运送的最多的数量，花费：指的是每单位的货物所需的花费。问题的是求一条可行的路径（包括路径上运送的数量）满足所有节点的要求并使总的花费最小。

这个问题有多项式时间解法，并且有多种算法。其中一个是类似最大流问题，通过剩余图找增广环来实现的 *环消除算法* (/Cycle Canceling Algorithm/ )。算法步骤如下：

*输入*:有向图 $G=(V,E)$ ，容量函数 $w:E\to{R^+}$ ，花费函数 $c:E\to{R^+}$ 和平衡函数  $b:V\to{R}$ 。

*输出*:最小花费流 $f:E\to{R^+}$ 。

初始化：计算一个可行的流 $f$ 。

while  $G_f$ 包含一个负的花费环 do

从 $G_f$ 中找到一个简单负环 $C$ 。

从 $C$ 中减去 $r_f(C)$ 个单位的流量并加入到 $f$  来构成新的 $f$ 。

end

return $f$ 

其中 $r_f(C)=min_{e\in C}{r_f(e)}$ 。

还有其他算法比如:Successive Shortest Path Algorithm和Primal-Dual Agorithm。



-----
#+BEGIN_HTML
<a href="http://oyzh.github.io">Back to Homepage</a>
<br>
<a href="http://github.com/oyzh">Github</a>
#+END_HTML
