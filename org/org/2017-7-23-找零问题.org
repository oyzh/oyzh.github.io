#+BEGIN_HTML
---
layout: post
title: 找零问题
excerpt: 算法导论16-1章
---
#+END_HTML
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}
* 问题描述
考虑用最少的硬币找 $n$ 美分零钱的问题.假定每种硬币的面额都是整数.这类问题可以
用0-1背包问题来建模,但是对于某类面额可以用贪心算法,可以用贪心算法解决的称为 ~Canonical Coin System~ .
给定一个硬币面额集合,我们需要判断它是否可用贪心算法.

下面根据实际的几个问题来描述部分问题的证明思路

* 问题1
假定硬币面额是 $c$ 的冪,即面额为 $c^0,c^1,\cdots,c^k$ , $c$ 和 $k$ 为整数, $c>1$ , $k \ge 1$, 证明贪心算法总能得到最优解.

设 $c^0,c^1,\cdots,c^k$ 对应 $n_0,n_1,\cdots,n_k$ 枚硬币.可以知道 $n_i < c$ ,因为如果 $n_i>c$, 总可以用 $c^{i+1}$ 替换这 $c$ 枚硬币, 新的硬币个数比旧的少:
$$因为c>1$$
$$所以n_i-c+1 < n_i$$
假设我们用贪心算法得到一个解 $N$ , 而最优解为 $N'$ ,从最大面值
向前找第一个枚数不同的面额为 $c^{m+1}$, 则有:
$$n_0c^0+n_1c^1+\cdots+n_mc^m \ge c^{m+1}$$
同时,由 $n_i < c$ 可得:
$$n_0c^0+n_1c^1+\cdots+n_mc^m \le (c-1)c^0+(c-1)c^1+\cdots+(c-1)c^m$$
$$=c^{m+1}-1$$
$$ < c^{m+1}$$

矛盾,所以用贪心得到最优解.

我们证明的思路是查看每一面值最大可取数量,比如这里最大可取 $c$ ,然后证明在取最大时也不能得到更大的面额.这就说明每次一定要取最大.用贪心可得最优解.
* 问题2
设计贪心算法求解赵零问题,假定有25美分,10美分,5美分和1美分四种面额的硬币.证明你的算法能找到最优解.

算法很简单,就是每次取最大,主要在于证明.还是用上面的证明思路. 10美分最多用2枚,5美分最多用1枚,1美分最多用4枚,这可以用反证得.
同时注意10美分用和5美分不能同时用最多,因为可以用25美分替代.

然后证明取最多不行,
1. 5美分(1)和1美分(4)用最多时产生9美分,小于10
2. 10美分(2),5美分(0),1美分(4)最多产生21美分,小于25
所以用贪心算法得到最优解

* 问题3
设计一组硬币面额,使得贪心算法不能保证得到最优解.这组硬币面额中应该包含1美分,使得对每个零钱都存在找零方案.

这里设计的时候就找小面额不能确定最大使用量,比如 $\{4,3,1\}$ ,面额3不能确定使用量,比如对于6如果采用贪心,得到解为 $\{1,0,2\}$,
最优解是 $\{0,2,0\}$ .

* 问题4
设计一个 $O(nk)$ 时间的找零算法,适用于任何 $k$ 种不同面额的硬币,假定总是包含1美分.

用动态规划解,参考0-1背包问题.
