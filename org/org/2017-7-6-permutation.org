#+BEGIN_HTML
---
layout: post
title: 排列相关的题目
excerpt: 关于全排列的题目
---
#+END_HTML
#+OPTIONS: toc:nil
#+OPTIONS: ^:{}

* 排列
  关于排列的题目可以用C++中的 ~next_premutation~,这个函数返回比当前排列 *大* 的下一个排列,要得到全排列,一般先将数组从小
到大排序,然后使用 ~next_permutaion~.
#+BEGIN_SRC
vector<int> nums = {2,3,1,5,4};
sort(nums.begin(), nums.end());
do{
    dosomething
} while(next_premutation(nums.begin(), nums.end()));
#+END_SRC

具体排列的原理用之后的题介绍

* 生成全排列
  Leetcode 46: Given a collection of *distinct* numbers, return all possible permutations.

  可以用STL中的next_premutation来解,自己的解法分为递归和非递归.递归解法比较直观,
n个数的全排列可以分解为:第一个数为k,剩下的n-1个数的全排列.
#+BEGIN_SRC
next_premutation(nums,i){
    if(i==nums.size()-1) ...;
    for(int i=k;i<nums.size();i++){
        swap(nums[i],num[k]);
        next_premutation(nums,i+1);
        swap(nums[i],nums[k]);
    }
}
#+END_SRC

计算时间复杂度:
$$T(n) = nT(n-1)+\Theta(n)$$
令$$G(n)=\frac{T(n)}{n!}$$
$$G(n) = G(n-1) + \Theta(\frac{1}{(n-1)!})$$
所以:
$$G(n) = \Theta(1)$$
$$T(n)=\Theta(n!)$$

全排列一共 $n!$ ,所以时间复杂度应该满足 $\Omega(n!)$ .
* 有重复元素的全排列
  LeetCode 47: Given a collection of numbers that might contain duplicates, return all possible unique permutations.

  同样可以用 ~next_permutaion~ .

  递归方法需要判断要交换的值是否相等.
* 下一个排列
  LeetCode 31:

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 -> 1,3,2

3,2,1 -> 1,2,3

1,1,5 -> 1,5,1

要得到下一个排列,可以观察我们需要找出尾部的递减序列, 例如对于 $(1,3,5,4,2)$ ,最后的 $(5,4,2)$ 是一个递减序列,不能从这个子序列中
得到比他大的下一个序列, 3比5小,我们用3和 $(5,4,2)$ 中刚好比3大的数交换,这个数就是4,这时变成了 $(5,3,2)$ 这个递减的序列,我们再
把这个序列翻转成 $(2,3,5)$ ,最后得到 $(1,4,2,3,5)$ .

平均时间复杂度:
$$T(n) = \Theta(n)$$

* 得到第k个排列
  LeetCode 60:

  The set ~[1,2,3,…,n]~ contains a total of n! unique permutations.

  By listing and labeling all of the permutations in order,
  We get the following sequence (ie, for n = 3):
1. "123"
2. "132"
3. "213"
4. "231"
5. "312"
6. "321"

Given $n$ and $k$, return the $k^{th}$ permutation sequence.

$n$ 个数有 $n!$ 个排列, 我们考虑第 $k$ 个排列的第一位, 任何一个数开始,都可以有 $(n-1)!$ 个排列,所以我们可以通过 $k/(n-1)!$ 来确定第一位的数字,确定了之后,我们找出剩下数字的 $k%(n-1)!$ 排列并接在后面, 这里的主要问题在算法比较直观,实现上比较麻烦, 可以用 $O(n)$ 的空间实现

比如:
$$n=3,k=3$$
初始化 $s$
$$s="123"$$
计算第一个位置的值:
$$\frac{3}{2!} = 1$$
交换位置0和位置1的值,并保证1到 $n$ 升序:
$$s="213"$$
继续到结尾.

时间复杂度:
$$T(n) = T(n-1) + \Theta(n)$$
$$T(n) = \Theta(n^2)$$

* 已知一个排列实例,求它的序号
和上面的问题相反,假设已知一个排列,求这个排列在全排列中的序号.

过程与上面相反,假设第一位是m,剩下的 $n-1$ 位全排列是 $(n-1)!$ , 则总的个数为:
$$ permutaionNumber(nums, n)=(nums[n]-1)*(n-1)! + permutaionNumber(nums, n-1) $$
可以用递归或循环的方式实现.

时间复杂度:
$$T(n) = T(n-1) + c$$
$$T(n) = \Theta(n)$$

* Shuffle an Array
打乱数组,全排列中每一个排列出现的概率相等,可参考算法导论第五章,RANDOM-IN-PLACE方法:
#+BEGIN_SRC
RANDOMIZE-IN-PLACE(A)
n = A.length
for i=1 to n
  swap A[i] with A[RANDOM(i,n)]
#+END_SRC

时间复杂度 $\Theta(n)$
