#+BEGIN_HTML
---
layout: post
title: 图像拼接算法流程
excerpt: 图像拼接算法
---
#+END_HTML
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: ^:{}
使用特征点匹配，计算两张图片的变换矩阵，将所有点变换后就可以得到拼接后的图像。主要就是不同坐标系中的点的变化。参考：CS131 PA1。
1. 使用DoG来得到兴趣点
2. 在兴趣点处构建SIFT描述子。这一步非常重要，但是代码里面实现的不是原始的SIFT特征，主要是假设了没有旋转变换
3. 匹配描述子，这里是计算两幅图的欧式距离。有一个限制是：某一兴趣点在另一幅图中最短距离要比第二短距离要相差大一点，这里设定一个指数，即最短距离要小于第二短距离的0.7倍，这个指数可以自己设置
4. 得到变换矩阵，采用齐次坐标，根据变换矩阵的自由度，如果得到的方程多于自由度的个数，使用最小二乘法得到最近似的解
5. RANSAC方法更好的得到变换矩阵，如果3中有匹配的点还是有错误的话，得到的旋转矩阵是不精确的。使用RANSAC法可以得到更好的旋转矩阵。具体方法下面介绍
6. 图像拼接，注意多张图片时如何拼接，要用到线性代数的一点知识

RANSAC方法：
提前设置三个阈值：一是接受的偏差距离，二是生成最后模型的最小点个数阈值，最后是最大迭代次数
1. 如果迭代次数大于最大迭代次数，则失败并退出。否则将匹配的点随机分成两部分，一部分是训练集，一部分是检验集，训练集最好是刚好可以生成模型的个数，比如直线的话就是两个点。
2. 用训练集生成模型
3. 用计算每一个测试集中的点相对模型的错误（用距离表示）
4. 判断有多少个点在偏差距离以内，如果个数大于最小点个数阈值，就用所有在偏差距离以内的点生成最后的模型，否则转到第一步
